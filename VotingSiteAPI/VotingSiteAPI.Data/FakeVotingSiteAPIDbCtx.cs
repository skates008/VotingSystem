// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace VotingSiteAPI.Data
{
    using Newtonsoft.Json;
    using VotingSiteAPI.Data.EfCfgMaps;
    using VotingSiteAPI.Domain.Entities;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class FakeVotingSiteAPIDbCtx : IVotingSiteAPIDbCtx
    {
        public System.Data.Entity.DbSet<BallotType> BallotTypes { get; set; }
        public System.Data.Entity.DbSet<BallotTypeMapping> BallotTypeMappings { get; set; }
        public System.Data.Entity.DbSet<Candidate> Candidates { get; set; }
        public System.Data.Entity.DbSet<Contest> Contests { get; set; }
        public System.Data.Entity.DbSet<Election> Elections { get; set; }
        public System.Data.Entity.DbSet<LoginAttempt> LoginAttempts { get; set; }
        public System.Data.Entity.DbSet<Vote> Votes { get; set; }
        public System.Data.Entity.DbSet<Voter> Voters { get; set; }

        public FakeVotingSiteAPIDbCtx()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            BallotTypes = new FakeDbSet<BallotType>("Id");
            BallotTypeMappings = new FakeDbSet<BallotTypeMapping>("Id");
            Candidates = new FakeDbSet<Candidate>("Id");
            Contests = new FakeDbSet<Contest>("Id");
            Elections = new FakeDbSet<Election>("Id");
            LoginAttempts = new FakeDbSet<LoginAttempt>("Id");
            Votes = new FakeDbSet<Vote>("Id");
            Voters = new FakeDbSet<Voter>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
